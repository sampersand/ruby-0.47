program := compexpr ;
compexpr := exprs [endline] ;
exprs := [[exprs endline] expr] ;
expr
 := 'class' IDENTIFIER superclass compexpr 'end' ['class']
  | 'module' IDENTIFIER compexpr 'end' ['module']
  | 'def' ['func'] fname f_arglist compexpr 'end' ['def']
  | 'def' singleton '.' fname f_arglist compexpr 'end' ['def']
  | 'undef' fname
  | 'def' fname fname
  | 'include' inc_list
  | mlhs_head [mlhs_tail] '=' args
  | expr2
  ;

mlhs_head
 := variable ','
  | primary '[' args ']' ','
  | primary '.' IDENTIFIER ','
  ;

mlhs_tail := [mlhs_tail ','] lhs ;
lhs := variable | primary '[' args ']' | primary '.' IDENTIFIER ;
superclass := [':' IDENTIFIER];
inc_list := [inc_list ','] IDENTIFIER ;
fname := fname0 | IVAR ;
fname0 := IDENTIFIER ['='] | op ;

op
 := '::' | '..'
  | '<=>' | '==' | '!=' | '=~' | '!~' | '>' | '>=' | '<' | '<='
  | '<<' | '>>' | '|' | '^' | '&'
  | '+' | '-' | '*' | '/' | '%' | '**'
  | '!' | '~' | '!@' | '~@' | '-@' | '+@'
  | '[]' | '[]='
  ;

f_arglist := '(' f_args ')' | endline ;
f_args := | f_arg [',' rest_arg] | rest_arg ;
f_arg := [f_arg ','] IDENTIFIER ;
rest_arg := '*' IDENTIFIER ;
singleton := variable | '(' compexpr ')' ;

expr2
 := 'if' expr2 then compexpr if_tail 'end' ['if']
  | 'unless' expr2 then compexpr opt_else 'end' ['unless']
  | 'case' expr2 [endline] cases 'end' ['case']
  | 'while' expr2 endline compexpr 'end' ['while']
  | 'until' expr2 endline compexpr 'end' ['until']
  | 'for' lhs 'in' expr2 endline compexpr 'end' ['for']
  | 'do' expr2 opt_using compexpr 'end' ['do']
  | 'protect' compexpr ['resque' compexpr] ['ensure' compexpr] 'end' ['protect']
  | 'redo' | 'break' | 'continue' | 'retry'
  | 'return' [expr2]
  | variable ('=' | SELF_ASGN) expr2
  | primary '[' args ']' ('=' | SELF_ASGN) expr2
  | primary '.' IDENTIFIER ('=' | SELF_ASGN) expr2
  | 'yield' expr2
  | expr2 ('..' | '...' | '+' | '-' | '*' | '/' | '%' | '**' | '|' | '^' | '&'
          | '<=>' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '=~' | '!~' | '<<' | '>>'
          | '::' | '&&' | '||') expr2
  | ['+' | '-' | '!' | '~'] expr2
  | primary
  ;

then := endline | [endline] 'then' ;

if_tail : opt_else | 'elsif' expr2 then compexpr if_tail ;
opt_else := ['else' compexpr] ;

opt_using := [[endline] 'using' lhs] endline ;

cases := opt_else | 'when' args endline compexpr cases ;

call_args := [args | '*' exprs | args ',' '*' exprs];
args := [args ','] expr2 ;

primary
 := variable
  | '(' compexpr ')'
  | STRING
  | primary '[' args ']'
  | literal
  | '[' [args] ']'
  | '{' [assocs] '}'
  | primary '.' IDENTIFIER '(' call_args ')'
  | primary '.' IDENTIFIER
  | IDENTIFIER '(' call_args ')'
  | IVAR '(' call_args ')'
  | 'super' '(' call_args ')'
  | 'super'
  ;

literal := numeric | '\\' symbol | '/' REGEXP ;

symbol := fname0 | IVAR | GVAR | CONSTANT ;
numeric := INTEGER | FLOAT ;
variable := IDENTIFIER | IVAR | GVAR | CONSTANT | 'nil' | 'self' ;

assocs := [assocs ','] assoc ;
assoc := expr2 '=>' expr2 ;
endline := ';' | '\n' ;
